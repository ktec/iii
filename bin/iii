#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'iii'

include GLI

#http://www.iii.co.uk/investment/detail/?showthreads=0&threshold=3&code=cotn%3AHER.L&it=le&display=discussion

program_desc 'A command line interface to iii.co.uk'

version Iii::VERSION

#desc 'Describe some switch here'
#switch [:s,:switch]

desc 'The username'
default_value ''
arg_name 'username'
flag [:u,:user,:username]

desc 'The password'
default_value ''
arg_name 'password'
flag [:p,:pass,:password]

desc 'List of the hottest investment products (use "| expand --tabs=14" if you want nice columns)'
arg_name 'hot'
command :hot do |c|
  c.desc 'Show the table headings'
  c.switch :th, :table_headings

  c.desc 'Delimiter used'
  c.default_value "\t"
  c.flag :d, :delimiter

  c.desc 'Sort by [p|price|price_desc|ch|change|change_desc]'
  c.default_value ""
  c.flag :s, :sort

  c.desc 'Show plain, no values just the list of stock symbols'
  c.switch :p, :plain

  c.action do |global_options,options,args|

    # Your command logic here
    p Iii::Community.new(options)
    # If you have any errors, just raise them
    # raise "that command made no sense"
  end
end

desc 'Show consensus information for an investment product'
arg_name 'code [codes]'
command :consensus do |c|

  c.desc 'Show title'
  c.switch [:t,:title]

  c.desc 'the period of time for consensus data'
  c.arg_name 'period'
  c.flag [:p,:period]

  c.action do |global_options,options,args|

    # Your command logic here
    arrayize(args).each do |code|
      p Iii::Consensus.new(code, options)
    end
   
    # If you have any errors, just raise them
    # raise "that command made no sense"
  end
end

desc 'Access details about individual investment products'
arg_name 'code [codes...]'
command :get do |c|

  c.action do |global_options,options,args|
    raise "try: iii get GOOG" unless args.length > 0
    # Your command logic here
    arrayize(args).each do |code|
      p Iii::Instrument.new(code)
    end

  end
end

def arrayize(args)
  case args
  when Array; args
  when String; args.split(",")
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  web = Iii::Site.set_credentials(global[:username],global[:password])

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
